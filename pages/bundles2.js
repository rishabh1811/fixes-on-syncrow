import React, { useState } from 'react';
import Head from 'next/head';
import Header from '../components/header';
import Footer from '../components/footer';
import Table from '../components/table';
import Link from 'next/link';
var lis1 = [];
var lis2 = [];
var lis3 = [];
var amount = 0;
var bundleName;
var propertyType;
export async function getStaticProps() {
  var res1 = await fetch('https://syncrow.kodagu.today/api/bundle-types');
  var response1 = await res1.json();
  var plans = response1.data;
  var res2 = await fetch('https://syncrow.kodagu.today/api/property-sizes');
  var response2 = await res2.json();
  var property_types = response2.data;
  return {
    props: {
      plans,
      property_types,
    },
  };
}
async function fetchbundledata() {
  amount = 0;
  var res1 = await fetch(
    `https://syncrow.kodagu.today/api/bundles?filters[bundle_type][name][$eq]=${bundleName.attributes.name
      .split(' ')
      .join(
        '%20'
      )}&filters[property_size][name][$eq]=${propertyType.attributes.name
      .split(' ')
      .join(
        '%20'
      )}&populate[0]=bundle_type&populate[1]=property_size&populate[2]=bundled_item_list&populate[3]=bundled_item_list.bundle_item`
  );
  var response1 = await res1.json();
  var data = response1.data[0].attributes;
  lis1 = data.bundled_item_list.filter((item) => {
    return item.bundle_item.data.attributes.type === 'convenience';
  });
  lis2 = data.bundled_item_list.filter((item) => {
    return item.bundle_item.data.attributes.type === 'safety';
  });
  lis3 = data.bundled_item_list.filter((item) => {
    return item.bundle_item.data.attributes.type === 'entertainment';
  });
  lis1.forEach((item) => {
    amount += item.bundle_item.data.attributes.price * item.quantity;
  });
  lis2.forEach((item) => {
    amount += item.bundle_item.data.attributes.price * item.quantity;
  });
  lis3.forEach((item) => {
    amount += item.bundle_item.data.attributes.price * item.quantity;
  });
}
export default function Bundle({ plans, property_types }) {
  const [active, setActive] = useState(1);
  var [property_types_toggle, toggleProperty] = useState(
    new Array(property_types.length).fill(false)
  );
  var [plan_types_toggle, togglePlan] = useState(
    new Array(plans.length).fill(false)
  );
  const handlePropertyToggle = (index) => {
    const newVisibilities = new Array(property_types.length).fill(false);
    newVisibilities[index] = !property_types_toggle[index];
    toggleProperty(newVisibilities);
    propertyType = property_types[index];
  };
  const handlePlanToggle = (index) => {
    const newVisibilities = new Array(plans.length).fill(false);
    newVisibilities[index] = !plan_types_toggle[index];
    togglePlan(newVisibilities);
    bundleName = plans[index];
  };
  return (
    <div className='overflow-x-hidden'>
      <Head>
        <title>Syncrow</title>
        <meta name='description' content='Generated by create next app' />
        <link
          rel='icon'
          href='https://ik.imagekit.io/jason7531/syncrow/common/Group_1_rkAObjd65.png?ik-sdk-version=javascript-1.4.3&updatedAt=1642343317149'
        />
        <style>
          @import
          url(https://fonts.cdnfonts.com/css/guthen-bloots-personal-use);
        </style>
      </Head>

      {/*  */}

      <div className={`h-screen relative ${active === 1 ? 'block' : 'hidden'}`}>
        <Header color='black' />
        <div className='flex justify-center items-center'>
          <div className='container px-4 md:px-20 mx-auto my-10'>
            <h1
              className='laptop:text-6xl desktop:text-7xl font-normal text-default mt-14'
              style={{ fontFamily: 'Guthen Bloots Personal Use' }}
            >
              Bundles
            </h1>
            <p className='font-semibold'>Select Type</p>
            <div className='grid grid-cols-3 my-10'>
              {property_types.map((types, index) => {
                return (
                  <div
                    key={index}
                    className={`${
                      property_types_toggle[index] ? 'bg-default' : 'bg-white'
                    } laptop:w-72 desktop:w-96 desktop:rounded-3xl laptop:rounded-2xl border-2 border-default p-2 cursor-pointer`}
                    onClick={() => {
                      handlePropertyToggle(index);
                    }}
                  >
                    <ul className='list-disc pl-7'>
                      <li
                        className={`${
                          !property_types_toggle[index]
                            ? 'text-default'
                            : 'text-white'
                        } laptop:text-3xl desktop:text-4xl`}
                      >
                        <span
                          className={`${
                            !property_types_toggle[index]
                              ? 'text-default'
                              : 'text-white'
                          } laptop:text-2xl desktop:text-3xl font-semibold flex justify-center`}
                        >
                          {types.attributes.name.trim()}
                        </span>
                      </li>
                    </ul>
                  </div>
                );
              })}
            </div>
            
            <div className='grid grid-cols-3 my-10'>
              {plans.map((types, index) => {
                return (
                  <div
                    key={index}
                    className={`${
                      plan_types_toggle[index] ? 'bg-default' : 'bg-white'
                    } laptop:w-72 desktop:w-96 laptop:rounded-2xl desktop:rounded-3xl relative border-2 border-default p-5 cursor-pointer`}
                    onClick={() => {
                      handlePlanToggle(index);
                    }}
                  >
                    <ul className='list-disc pl-7'>
                      <li
                        className={`${
                          !plan_types_toggle[index]
                            ? 'text-default'
                            : 'text-white'
                        } laptop:text-3xl desktop:text-4xl`}
                      >
                        <span
                          className={`${
                            !plan_types_toggle[index]
                              ? 'text-default'
                              : 'text-white'
                          } "laptop:text-4xl desktop:text-5xl flex justify-center`}
                        >
                          {types.attributes.name.trim()}
                        </span>
                      </li>
                    </ul>
                  </div>
                );
              })}
            </div>
            <button
              className='text-white laptop:text-base desktop:text-xl laptop:w-36 px-4 py-2 rounded-lg'
              style={{ background: '#747474' }}
              onClick={async () => {
                await fetchbundledata();
                if (propertyType !== undefined && bundleName !== undefined) {
                  setActive(active + 1);
                }
              }}
            >
              Next
            </button>
          </div>
        </div>

      </div>

      {/*  */}
      <div
        className={`desktop:h-114 laptop:h-110 relative ${
          active === 2 ? 'block' : 'hidden'
        }`}
      >
        <Header color='black' />

        <div className='laptop:text-4xl desktop:text-5xl text-default absolute top-36 left-20'>
          {propertyType !== undefined ? propertyType.attributes.name : ''}{' '}
          <br /> {bundleName !== undefined ? bundleName.attributes.name : ''}{' '}
          <br /> Bundle
        </div>
        <div className='laptop:text-xl desktop:text-2xl text-default absolute top-96 left-20'>
          Starting At <br /> AED {amount}
        </div>
        <div className='grid grid-cols-3 grid-rows-1 laptop:gap-x-96 desktop:gap-x-100 w-96'>
          <div className={`${lis1.length === 0 ? 'hidden' : ''}`}>
            <Table name='Convenience' itemList={lis1} editable='hidden' />
          </div>
          <div className={`${lis2.length === 0 ? 'hidden' : ''}`}>
            <Table name='Safety' itemList={lis2} editable='hidden' />
          </div>
          <div className={`${lis3.length === 0 ? 'hidden' : ''}`}>
            <Table name='Entertainment' itemList={lis3} editable='hidden' />
          </div>
        </div>

        <button
          className='text-white laptop:text-base desktop:text-xl laptop:w-36 laptop:h-8 desktop:h-10 rounded-lg absolute laptop:bottom-52 desktop:bottom-72 left-20 '
          style={{ background: '#747474' }}
          onClick={() => {
            setActive(active - 1);
            propertyType = undefined;
            bundleName = undefined;
            property_types_toggle = new Array(property_types.length).fill(
              false
            );
            toggleProperty(property_types_toggle);
            plan_types_toggle = new Array(plans.length).fill(false);
            togglePlan(plan_types_toggle);
            amount = 0;
          }}
        >
          Back
        </button>

        <Link
          href={{
            pathname: '/book',
            query: {
              bundle:
                bundleName !== undefined ? JSON.stringify(bundleName) : 'none',
              property_type:
                propertyType !== undefined
                  ? JSON.stringify(propertyType)
                  : 'none',
              lis: JSON.stringify([...lis1, ...lis2, ...lis3]),
              amount: amount,
            },
          }}
          as={`/book`}
        >
          <button
            className='text-white laptop:text-base desktop:text-xl laptop:w-36 desktop:w-44 laptop:h-8 desktop:h-10 rounded-lg absolute laptop:bottom-52 desktop:bottom-64 right-40 '
            style={{ background: '#747474' }}
          >
            Book Our Expert
          </button>
        </Link>    
      </div>  
        <Footer /> 
    </div>
  );
}
